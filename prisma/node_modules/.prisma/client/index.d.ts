import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.7.1
 * Query Engine version: 5c2ad460cf4fe8c9330e6640b266c046542c8b6a
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Movies
 * const movies = await prisma.movie.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Movies
   * const movies = await prisma.movie.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.movie`: Exposes CRUD operations for the **Movie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Movies
    * const movies = await prisma.movie.findMany()
    * ```
    */
  get movie(): MovieDelegate;

  /**
   * `prisma.person`: Exposes CRUD operations for the **Person** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more People
    * const people = await prisma.person.findMany()
    * ```
    */
  get person(): PersonDelegate;

  /**
   * `prisma.genre`: Exposes CRUD operations for the **Genre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genres
    * const genres = await prisma.genre.findMany()
    * ```
    */
  get genre(): GenreDelegate;

  /**
   * `prisma.language`: Exposes CRUD operations for the **Language** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Languages
    * const languages = await prisma.language.findMany()
    * ```
    */
  get language(): LanguageDelegate;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): UserDelegate;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): RoomDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const MovieDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  directorId: 'directorId',
  releaseDate: 'releaseDate',
  boxOffice: 'boxOffice',
  languageId: 'languageId'
};

export declare type MovieDistinctFieldEnum = (typeof MovieDistinctFieldEnum)[keyof typeof MovieDistinctFieldEnum]


export declare const PersonDistinctFieldEnum: {
  id: 'id',
  name: 'name'
};

export declare type PersonDistinctFieldEnum = (typeof PersonDistinctFieldEnum)[keyof typeof PersonDistinctFieldEnum]


export declare const GenreDistinctFieldEnum: {
  id: 'id',
  name: 'name'
};

export declare type GenreDistinctFieldEnum = (typeof GenreDistinctFieldEnum)[keyof typeof GenreDistinctFieldEnum]


export declare const LanguageDistinctFieldEnum: {
  id: 'id',
  name: 'name'
};

export declare type LanguageDistinctFieldEnum = (typeof LanguageDistinctFieldEnum)[keyof typeof LanguageDistinctFieldEnum]


export declare const UserDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  score: 'score',
  participantId: 'participantId',
  hostId: 'hostId',
  roomId: 'roomId'
};

export declare type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


export declare const RoomDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  round: 'round',
  roundLimit: 'roundLimit',
  roundMovieId: 'roundMovieId',
  languageId: 'languageId'
};

export declare type RoomDistinctFieldEnum = (typeof RoomDistinctFieldEnum)[keyof typeof RoomDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]



/**
 * Model Movie
 */

export type Movie = {
  id: number
  createdAt: Date
  name: string
  directorId: number
  releaseDate: Date
  boxOffice: number
  languageId: number
}


export type AggregateMovie = {
  count: number
  avg: MovieAvgAggregateOutputType | null
  sum: MovieSumAggregateOutputType | null
  min: MovieMinAggregateOutputType | null
  max: MovieMaxAggregateOutputType | null
}

export type MovieAvgAggregateOutputType = {
  id: number
  directorId: number
  boxOffice: number
  languageId: number
}

export type MovieSumAggregateOutputType = {
  id: number
  directorId: number
  boxOffice: number
  languageId: number
}

export type MovieMinAggregateOutputType = {
  id: number
  directorId: number
  boxOffice: number
  languageId: number
}

export type MovieMaxAggregateOutputType = {
  id: number
  directorId: number
  boxOffice: number
  languageId: number
}


export type MovieAvgAggregateInputType = {
  id?: true
  directorId?: true
  boxOffice?: true
  languageId?: true
}

export type MovieSumAggregateInputType = {
  id?: true
  directorId?: true
  boxOffice?: true
  languageId?: true
}

export type MovieMinAggregateInputType = {
  id?: true
  directorId?: true
  boxOffice?: true
  languageId?: true
}

export type MovieMaxAggregateInputType = {
  id?: true
  directorId?: true
  boxOffice?: true
  languageId?: true
}

export type AggregateMovieArgs = {
  where?: MovieWhereInput
  orderBy?: Enumerable<MovieOrderByInput>
  cursor?: MovieWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<MovieDistinctFieldEnum>
  count?: true
  avg?: MovieAvgAggregateInputType
  sum?: MovieSumAggregateInputType
  min?: MovieMinAggregateInputType
  max?: MovieMaxAggregateInputType
}

export type GetMovieAggregateType<T extends AggregateMovieArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetMovieAggregateScalarType<T[P]>
}

export type GetMovieAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof MovieAvgAggregateOutputType ? MovieAvgAggregateOutputType[P] : never
}
    
    

export type MovieSelect = {
  id?: boolean
  createdAt?: boolean
  name?: boolean
  directorId?: boolean
  director?: boolean | PersonArgs
  cast?: boolean | FindManyPersonArgs
  releaseDate?: boolean
  genre?: boolean | FindManyGenreArgs
  boxOffice?: boolean
  language?: boolean | LanguageArgs
  languageId?: boolean
  rooms?: boolean | FindManyRoomArgs
}

export type MovieInclude = {
  director?: boolean | PersonArgs
  cast?: boolean | FindManyPersonArgs
  genre?: boolean | FindManyGenreArgs
  language?: boolean | LanguageArgs
  rooms?: boolean | FindManyRoomArgs
}

export type MovieGetPayload<
  S extends boolean | null | undefined | MovieArgs,
  U = keyof S
> = S extends true
  ? Movie
  : S extends undefined
  ? never
  : S extends MovieArgs | FindManyMovieArgs
  ? 'include' extends U
    ? Movie  & {
      [P in TrueKeys<S['include']>]:
      P extends 'director'
      ? PersonGetPayload<S['include'][P]> :
      P extends 'cast'
      ? Array<PersonGetPayload<S['include'][P]>> :
      P extends 'genre'
      ? Array<GenreGetPayload<S['include'][P]>> :
      P extends 'language'
      ? LanguageGetPayload<S['include'][P]> :
      P extends 'rooms'
      ? Array<RoomGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Movie ? Movie[P]
: 
      P extends 'director'
      ? PersonGetPayload<S['select'][P]> :
      P extends 'cast'
      ? Array<PersonGetPayload<S['select'][P]>> :
      P extends 'genre'
      ? Array<GenreGetPayload<S['select'][P]>> :
      P extends 'language'
      ? LanguageGetPayload<S['select'][P]> :
      P extends 'rooms'
      ? Array<RoomGetPayload<S['select'][P]>> : never
    }
  : Movie
: Movie


export interface MovieDelegate {
  /**
   * Find zero or one Movie.
   * @param {FindOneMovieArgs} args - Arguments to find a Movie
   * @example
   * // Get one Movie
   * const movie = await prisma.movie.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneMovieArgs>(
    args: Subset<T, FindOneMovieArgs>
  ): CheckSelect<T, Prisma__MovieClient<Movie | null>, Prisma__MovieClient<MovieGetPayload<T> | null>>
  /**
   * Find zero or more Movies.
   * @param {FindManyMovieArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Movies
   * const movies = await prisma.movie.findMany()
   * 
   * // Get first 10 Movies
   * const movies = await prisma.movie.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const movieWithIdOnly = await prisma.movie.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyMovieArgs>(
    args?: Subset<T, FindManyMovieArgs>
  ): CheckSelect<T, Promise<Array<Movie>>, Promise<Array<MovieGetPayload<T>>>>
  /**
   * Create a Movie.
   * @param {MovieCreateArgs} args - Arguments to create a Movie.
   * @example
   * // Create one Movie
   * const Movie = await prisma.movie.create({
   *   data: {
   *     // ... data to create a Movie
   *   }
   * })
   * 
  **/
  create<T extends MovieCreateArgs>(
    args: Subset<T, MovieCreateArgs>
  ): CheckSelect<T, Prisma__MovieClient<Movie>, Prisma__MovieClient<MovieGetPayload<T>>>
  /**
   * Delete a Movie.
   * @param {MovieDeleteArgs} args - Arguments to delete one Movie.
   * @example
   * // Delete one Movie
   * const Movie = await prisma.movie.delete({
   *   where: {
   *     // ... filter to delete one Movie
   *   }
   * })
   * 
  **/
  delete<T extends MovieDeleteArgs>(
    args: Subset<T, MovieDeleteArgs>
  ): CheckSelect<T, Prisma__MovieClient<Movie>, Prisma__MovieClient<MovieGetPayload<T>>>
  /**
   * Update one Movie.
   * @param {MovieUpdateArgs} args - Arguments to update one Movie.
   * @example
   * // Update one Movie
   * const movie = await prisma.movie.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends MovieUpdateArgs>(
    args: Subset<T, MovieUpdateArgs>
  ): CheckSelect<T, Prisma__MovieClient<Movie>, Prisma__MovieClient<MovieGetPayload<T>>>
  /**
   * Delete zero or more Movies.
   * @param {MovieDeleteManyArgs} args - Arguments to filter Movies to delete.
   * @example
   * // Delete a few Movies
   * const { count } = await prisma.movie.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends MovieDeleteManyArgs>(
    args: Subset<T, MovieDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Movies.
   * @param {MovieUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Movies
   * const movie = await prisma.movie.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends MovieUpdateManyArgs>(
    args: Subset<T, MovieUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Movie.
   * @param {MovieUpsertArgs} args - Arguments to update or create a Movie.
   * @example
   * // Update or create a Movie
   * const movie = await prisma.movie.upsert({
   *   create: {
   *     // ... data to create a Movie
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Movie we want to update
   *   }
   * })
  **/
  upsert<T extends MovieUpsertArgs>(
    args: Subset<T, MovieUpsertArgs>
  ): CheckSelect<T, Prisma__MovieClient<Movie>, Prisma__MovieClient<MovieGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyMovieArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateMovieArgs>(args: Subset<T, AggregateMovieArgs>): Promise<GetMovieAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Movie.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__MovieClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  director<T extends PersonArgs = {}>(args?: Subset<T, PersonArgs>): CheckSelect<T, Prisma__PersonClient<Person | null>, Prisma__PersonClient<PersonGetPayload<T> | null>>;

  cast<T extends FindManyPersonArgs = {}>(args?: Subset<T, FindManyPersonArgs>): CheckSelect<T, Promise<Array<Person>>, Promise<Array<PersonGetPayload<T>>>>;

  genre<T extends FindManyGenreArgs = {}>(args?: Subset<T, FindManyGenreArgs>): CheckSelect<T, Promise<Array<Genre>>, Promise<Array<GenreGetPayload<T>>>>;

  language<T extends LanguageArgs = {}>(args?: Subset<T, LanguageArgs>): CheckSelect<T, Prisma__LanguageClient<Language | null>, Prisma__LanguageClient<LanguageGetPayload<T> | null>>;

  rooms<T extends FindManyRoomArgs = {}>(args?: Subset<T, FindManyRoomArgs>): CheckSelect<T, Promise<Array<Room>>, Promise<Array<RoomGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Movie findOne
 */
export type FindOneMovieArgs = {
  /**
   * Select specific fields to fetch from the Movie
  **/
  select?: MovieSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MovieInclude | null
  /**
   * Filter, which Movie to fetch.
  **/
  where: MovieWhereUniqueInput
}


/**
 * Movie findMany
 */
export type FindManyMovieArgs = {
  /**
   * Select specific fields to fetch from the Movie
  **/
  select?: MovieSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MovieInclude | null
  /**
   * Filter, which Movies to fetch.
  **/
  where?: MovieWhereInput
  /**
   * Determine the order of the Movies to fetch.
  **/
  orderBy?: Enumerable<MovieOrderByInput>
  /**
   * Sets the position for listing Movies.
  **/
  cursor?: MovieWhereUniqueInput
  /**
   * The number of Movies to fetch. If negative number, it will take Movies before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Movies.
  **/
  skip?: number
  distinct?: Enumerable<MovieDistinctFieldEnum>
}


/**
 * Movie create
 */
export type MovieCreateArgs = {
  /**
   * Select specific fields to fetch from the Movie
  **/
  select?: MovieSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MovieInclude | null
  /**
   * The data needed to create a Movie.
  **/
  data: MovieCreateInput
}


/**
 * Movie update
 */
export type MovieUpdateArgs = {
  /**
   * Select specific fields to fetch from the Movie
  **/
  select?: MovieSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MovieInclude | null
  /**
   * The data needed to update a Movie.
  **/
  data: MovieUpdateInput
  /**
   * Choose, which Movie to update.
  **/
  where: MovieWhereUniqueInput
}


/**
 * Movie updateMany
 */
export type MovieUpdateManyArgs = {
  data: MovieUpdateManyMutationInput
  where?: MovieWhereInput
}


/**
 * Movie upsert
 */
export type MovieUpsertArgs = {
  /**
   * Select specific fields to fetch from the Movie
  **/
  select?: MovieSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MovieInclude | null
  /**
   * The filter to search for the Movie to update in case it exists.
  **/
  where: MovieWhereUniqueInput
  /**
   * In case the Movie found by the `where` argument doesn't exist, create a new Movie with this data.
  **/
  create: MovieCreateInput
  /**
   * In case the Movie was found with the provided `where` argument, update it with this data.
  **/
  update: MovieUpdateInput
}


/**
 * Movie delete
 */
export type MovieDeleteArgs = {
  /**
   * Select specific fields to fetch from the Movie
  **/
  select?: MovieSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MovieInclude | null
  /**
   * Filter which Movie to delete.
  **/
  where: MovieWhereUniqueInput
}


/**
 * Movie deleteMany
 */
export type MovieDeleteManyArgs = {
  where?: MovieWhereInput
}


/**
 * Movie without action
 */
export type MovieArgs = {
  /**
   * Select specific fields to fetch from the Movie
  **/
  select?: MovieSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MovieInclude | null
}



/**
 * Model Person
 */

export type Person = {
  id: number
  name: string
}


export type AggregatePerson = {
  count: number
  avg: PersonAvgAggregateOutputType | null
  sum: PersonSumAggregateOutputType | null
  min: PersonMinAggregateOutputType | null
  max: PersonMaxAggregateOutputType | null
}

export type PersonAvgAggregateOutputType = {
  id: number
}

export type PersonSumAggregateOutputType = {
  id: number
}

export type PersonMinAggregateOutputType = {
  id: number
}

export type PersonMaxAggregateOutputType = {
  id: number
}


export type PersonAvgAggregateInputType = {
  id?: true
}

export type PersonSumAggregateInputType = {
  id?: true
}

export type PersonMinAggregateInputType = {
  id?: true
}

export type PersonMaxAggregateInputType = {
  id?: true
}

export type AggregatePersonArgs = {
  where?: PersonWhereInput
  orderBy?: Enumerable<PersonOrderByInput>
  cursor?: PersonWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<PersonDistinctFieldEnum>
  count?: true
  avg?: PersonAvgAggregateInputType
  sum?: PersonSumAggregateInputType
  min?: PersonMinAggregateInputType
  max?: PersonMaxAggregateInputType
}

export type GetPersonAggregateType<T extends AggregatePersonArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetPersonAggregateScalarType<T[P]>
}

export type GetPersonAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof PersonAvgAggregateOutputType ? PersonAvgAggregateOutputType[P] : never
}
    
    

export type PersonSelect = {
  id?: boolean
  name?: boolean
  acted?: boolean | FindManyMovieArgs
  directed?: boolean | FindManyMovieArgs
}

export type PersonInclude = {
  acted?: boolean | FindManyMovieArgs
  directed?: boolean | FindManyMovieArgs
}

export type PersonGetPayload<
  S extends boolean | null | undefined | PersonArgs,
  U = keyof S
> = S extends true
  ? Person
  : S extends undefined
  ? never
  : S extends PersonArgs | FindManyPersonArgs
  ? 'include' extends U
    ? Person  & {
      [P in TrueKeys<S['include']>]:
      P extends 'acted'
      ? Array<MovieGetPayload<S['include'][P]>> :
      P extends 'directed'
      ? Array<MovieGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Person ? Person[P]
: 
      P extends 'acted'
      ? Array<MovieGetPayload<S['select'][P]>> :
      P extends 'directed'
      ? Array<MovieGetPayload<S['select'][P]>> : never
    }
  : Person
: Person


export interface PersonDelegate {
  /**
   * Find zero or one Person.
   * @param {FindOnePersonArgs} args - Arguments to find a Person
   * @example
   * // Get one Person
   * const person = await prisma.person.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnePersonArgs>(
    args: Subset<T, FindOnePersonArgs>
  ): CheckSelect<T, Prisma__PersonClient<Person | null>, Prisma__PersonClient<PersonGetPayload<T> | null>>
  /**
   * Find zero or more People.
   * @param {FindManyPersonArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all People
   * const people = await prisma.person.findMany()
   * 
   * // Get first 10 People
   * const people = await prisma.person.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const personWithIdOnly = await prisma.person.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyPersonArgs>(
    args?: Subset<T, FindManyPersonArgs>
  ): CheckSelect<T, Promise<Array<Person>>, Promise<Array<PersonGetPayload<T>>>>
  /**
   * Create a Person.
   * @param {PersonCreateArgs} args - Arguments to create a Person.
   * @example
   * // Create one Person
   * const Person = await prisma.person.create({
   *   data: {
   *     // ... data to create a Person
   *   }
   * })
   * 
  **/
  create<T extends PersonCreateArgs>(
    args: Subset<T, PersonCreateArgs>
  ): CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>>
  /**
   * Delete a Person.
   * @param {PersonDeleteArgs} args - Arguments to delete one Person.
   * @example
   * // Delete one Person
   * const Person = await prisma.person.delete({
   *   where: {
   *     // ... filter to delete one Person
   *   }
   * })
   * 
  **/
  delete<T extends PersonDeleteArgs>(
    args: Subset<T, PersonDeleteArgs>
  ): CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>>
  /**
   * Update one Person.
   * @param {PersonUpdateArgs} args - Arguments to update one Person.
   * @example
   * // Update one Person
   * const person = await prisma.person.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends PersonUpdateArgs>(
    args: Subset<T, PersonUpdateArgs>
  ): CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>>
  /**
   * Delete zero or more People.
   * @param {PersonDeleteManyArgs} args - Arguments to filter People to delete.
   * @example
   * // Delete a few People
   * const { count } = await prisma.person.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends PersonDeleteManyArgs>(
    args: Subset<T, PersonDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more People.
   * @param {PersonUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many People
   * const person = await prisma.person.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends PersonUpdateManyArgs>(
    args: Subset<T, PersonUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Person.
   * @param {PersonUpsertArgs} args - Arguments to update or create a Person.
   * @example
   * // Update or create a Person
   * const person = await prisma.person.upsert({
   *   create: {
   *     // ... data to create a Person
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Person we want to update
   *   }
   * })
  **/
  upsert<T extends PersonUpsertArgs>(
    args: Subset<T, PersonUpsertArgs>
  ): CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyPersonArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregatePersonArgs>(args: Subset<T, AggregatePersonArgs>): Promise<GetPersonAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Person.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__PersonClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  acted<T extends FindManyMovieArgs = {}>(args?: Subset<T, FindManyMovieArgs>): CheckSelect<T, Promise<Array<Movie>>, Promise<Array<MovieGetPayload<T>>>>;

  directed<T extends FindManyMovieArgs = {}>(args?: Subset<T, FindManyMovieArgs>): CheckSelect<T, Promise<Array<Movie>>, Promise<Array<MovieGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Person findOne
 */
export type FindOnePersonArgs = {
  /**
   * Select specific fields to fetch from the Person
  **/
  select?: PersonSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PersonInclude | null
  /**
   * Filter, which Person to fetch.
  **/
  where: PersonWhereUniqueInput
}


/**
 * Person findMany
 */
export type FindManyPersonArgs = {
  /**
   * Select specific fields to fetch from the Person
  **/
  select?: PersonSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PersonInclude | null
  /**
   * Filter, which People to fetch.
  **/
  where?: PersonWhereInput
  /**
   * Determine the order of the People to fetch.
  **/
  orderBy?: Enumerable<PersonOrderByInput>
  /**
   * Sets the position for listing People.
  **/
  cursor?: PersonWhereUniqueInput
  /**
   * The number of People to fetch. If negative number, it will take People before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` People.
  **/
  skip?: number
  distinct?: Enumerable<PersonDistinctFieldEnum>
}


/**
 * Person create
 */
export type PersonCreateArgs = {
  /**
   * Select specific fields to fetch from the Person
  **/
  select?: PersonSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PersonInclude | null
  /**
   * The data needed to create a Person.
  **/
  data: PersonCreateInput
}


/**
 * Person update
 */
export type PersonUpdateArgs = {
  /**
   * Select specific fields to fetch from the Person
  **/
  select?: PersonSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PersonInclude | null
  /**
   * The data needed to update a Person.
  **/
  data: PersonUpdateInput
  /**
   * Choose, which Person to update.
  **/
  where: PersonWhereUniqueInput
}


/**
 * Person updateMany
 */
export type PersonUpdateManyArgs = {
  data: PersonUpdateManyMutationInput
  where?: PersonWhereInput
}


/**
 * Person upsert
 */
export type PersonUpsertArgs = {
  /**
   * Select specific fields to fetch from the Person
  **/
  select?: PersonSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PersonInclude | null
  /**
   * The filter to search for the Person to update in case it exists.
  **/
  where: PersonWhereUniqueInput
  /**
   * In case the Person found by the `where` argument doesn't exist, create a new Person with this data.
  **/
  create: PersonCreateInput
  /**
   * In case the Person was found with the provided `where` argument, update it with this data.
  **/
  update: PersonUpdateInput
}


/**
 * Person delete
 */
export type PersonDeleteArgs = {
  /**
   * Select specific fields to fetch from the Person
  **/
  select?: PersonSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PersonInclude | null
  /**
   * Filter which Person to delete.
  **/
  where: PersonWhereUniqueInput
}


/**
 * Person deleteMany
 */
export type PersonDeleteManyArgs = {
  where?: PersonWhereInput
}


/**
 * Person without action
 */
export type PersonArgs = {
  /**
   * Select specific fields to fetch from the Person
  **/
  select?: PersonSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PersonInclude | null
}



/**
 * Model Genre
 */

export type Genre = {
  id: number
  name: string
}


export type AggregateGenre = {
  count: number
  avg: GenreAvgAggregateOutputType | null
  sum: GenreSumAggregateOutputType | null
  min: GenreMinAggregateOutputType | null
  max: GenreMaxAggregateOutputType | null
}

export type GenreAvgAggregateOutputType = {
  id: number
}

export type GenreSumAggregateOutputType = {
  id: number
}

export type GenreMinAggregateOutputType = {
  id: number
}

export type GenreMaxAggregateOutputType = {
  id: number
}


export type GenreAvgAggregateInputType = {
  id?: true
}

export type GenreSumAggregateInputType = {
  id?: true
}

export type GenreMinAggregateInputType = {
  id?: true
}

export type GenreMaxAggregateInputType = {
  id?: true
}

export type AggregateGenreArgs = {
  where?: GenreWhereInput
  orderBy?: Enumerable<GenreOrderByInput>
  cursor?: GenreWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<GenreDistinctFieldEnum>
  count?: true
  avg?: GenreAvgAggregateInputType
  sum?: GenreSumAggregateInputType
  min?: GenreMinAggregateInputType
  max?: GenreMaxAggregateInputType
}

export type GetGenreAggregateType<T extends AggregateGenreArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetGenreAggregateScalarType<T[P]>
}

export type GetGenreAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof GenreAvgAggregateOutputType ? GenreAvgAggregateOutputType[P] : never
}
    
    

export type GenreSelect = {
  id?: boolean
  name?: boolean
  movies?: boolean | FindManyMovieArgs
}

export type GenreInclude = {
  movies?: boolean | FindManyMovieArgs
}

export type GenreGetPayload<
  S extends boolean | null | undefined | GenreArgs,
  U = keyof S
> = S extends true
  ? Genre
  : S extends undefined
  ? never
  : S extends GenreArgs | FindManyGenreArgs
  ? 'include' extends U
    ? Genre  & {
      [P in TrueKeys<S['include']>]:
      P extends 'movies'
      ? Array<MovieGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Genre ? Genre[P]
: 
      P extends 'movies'
      ? Array<MovieGetPayload<S['select'][P]>> : never
    }
  : Genre
: Genre


export interface GenreDelegate {
  /**
   * Find zero or one Genre.
   * @param {FindOneGenreArgs} args - Arguments to find a Genre
   * @example
   * // Get one Genre
   * const genre = await prisma.genre.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneGenreArgs>(
    args: Subset<T, FindOneGenreArgs>
  ): CheckSelect<T, Prisma__GenreClient<Genre | null>, Prisma__GenreClient<GenreGetPayload<T> | null>>
  /**
   * Find zero or more Genres.
   * @param {FindManyGenreArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Genres
   * const genres = await prisma.genre.findMany()
   * 
   * // Get first 10 Genres
   * const genres = await prisma.genre.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const genreWithIdOnly = await prisma.genre.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyGenreArgs>(
    args?: Subset<T, FindManyGenreArgs>
  ): CheckSelect<T, Promise<Array<Genre>>, Promise<Array<GenreGetPayload<T>>>>
  /**
   * Create a Genre.
   * @param {GenreCreateArgs} args - Arguments to create a Genre.
   * @example
   * // Create one Genre
   * const Genre = await prisma.genre.create({
   *   data: {
   *     // ... data to create a Genre
   *   }
   * })
   * 
  **/
  create<T extends GenreCreateArgs>(
    args: Subset<T, GenreCreateArgs>
  ): CheckSelect<T, Prisma__GenreClient<Genre>, Prisma__GenreClient<GenreGetPayload<T>>>
  /**
   * Delete a Genre.
   * @param {GenreDeleteArgs} args - Arguments to delete one Genre.
   * @example
   * // Delete one Genre
   * const Genre = await prisma.genre.delete({
   *   where: {
   *     // ... filter to delete one Genre
   *   }
   * })
   * 
  **/
  delete<T extends GenreDeleteArgs>(
    args: Subset<T, GenreDeleteArgs>
  ): CheckSelect<T, Prisma__GenreClient<Genre>, Prisma__GenreClient<GenreGetPayload<T>>>
  /**
   * Update one Genre.
   * @param {GenreUpdateArgs} args - Arguments to update one Genre.
   * @example
   * // Update one Genre
   * const genre = await prisma.genre.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends GenreUpdateArgs>(
    args: Subset<T, GenreUpdateArgs>
  ): CheckSelect<T, Prisma__GenreClient<Genre>, Prisma__GenreClient<GenreGetPayload<T>>>
  /**
   * Delete zero or more Genres.
   * @param {GenreDeleteManyArgs} args - Arguments to filter Genres to delete.
   * @example
   * // Delete a few Genres
   * const { count } = await prisma.genre.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends GenreDeleteManyArgs>(
    args: Subset<T, GenreDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Genres.
   * @param {GenreUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Genres
   * const genre = await prisma.genre.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends GenreUpdateManyArgs>(
    args: Subset<T, GenreUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Genre.
   * @param {GenreUpsertArgs} args - Arguments to update or create a Genre.
   * @example
   * // Update or create a Genre
   * const genre = await prisma.genre.upsert({
   *   create: {
   *     // ... data to create a Genre
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Genre we want to update
   *   }
   * })
  **/
  upsert<T extends GenreUpsertArgs>(
    args: Subset<T, GenreUpsertArgs>
  ): CheckSelect<T, Prisma__GenreClient<Genre>, Prisma__GenreClient<GenreGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyGenreArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateGenreArgs>(args: Subset<T, AggregateGenreArgs>): Promise<GetGenreAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Genre.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__GenreClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  movies<T extends FindManyMovieArgs = {}>(args?: Subset<T, FindManyMovieArgs>): CheckSelect<T, Promise<Array<Movie>>, Promise<Array<MovieGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Genre findOne
 */
export type FindOneGenreArgs = {
  /**
   * Select specific fields to fetch from the Genre
  **/
  select?: GenreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: GenreInclude | null
  /**
   * Filter, which Genre to fetch.
  **/
  where: GenreWhereUniqueInput
}


/**
 * Genre findMany
 */
export type FindManyGenreArgs = {
  /**
   * Select specific fields to fetch from the Genre
  **/
  select?: GenreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: GenreInclude | null
  /**
   * Filter, which Genres to fetch.
  **/
  where?: GenreWhereInput
  /**
   * Determine the order of the Genres to fetch.
  **/
  orderBy?: Enumerable<GenreOrderByInput>
  /**
   * Sets the position for listing Genres.
  **/
  cursor?: GenreWhereUniqueInput
  /**
   * The number of Genres to fetch. If negative number, it will take Genres before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Genres.
  **/
  skip?: number
  distinct?: Enumerable<GenreDistinctFieldEnum>
}


/**
 * Genre create
 */
export type GenreCreateArgs = {
  /**
   * Select specific fields to fetch from the Genre
  **/
  select?: GenreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: GenreInclude | null
  /**
   * The data needed to create a Genre.
  **/
  data: GenreCreateInput
}


/**
 * Genre update
 */
export type GenreUpdateArgs = {
  /**
   * Select specific fields to fetch from the Genre
  **/
  select?: GenreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: GenreInclude | null
  /**
   * The data needed to update a Genre.
  **/
  data: GenreUpdateInput
  /**
   * Choose, which Genre to update.
  **/
  where: GenreWhereUniqueInput
}


/**
 * Genre updateMany
 */
export type GenreUpdateManyArgs = {
  data: GenreUpdateManyMutationInput
  where?: GenreWhereInput
}


/**
 * Genre upsert
 */
export type GenreUpsertArgs = {
  /**
   * Select specific fields to fetch from the Genre
  **/
  select?: GenreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: GenreInclude | null
  /**
   * The filter to search for the Genre to update in case it exists.
  **/
  where: GenreWhereUniqueInput
  /**
   * In case the Genre found by the `where` argument doesn't exist, create a new Genre with this data.
  **/
  create: GenreCreateInput
  /**
   * In case the Genre was found with the provided `where` argument, update it with this data.
  **/
  update: GenreUpdateInput
}


/**
 * Genre delete
 */
export type GenreDeleteArgs = {
  /**
   * Select specific fields to fetch from the Genre
  **/
  select?: GenreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: GenreInclude | null
  /**
   * Filter which Genre to delete.
  **/
  where: GenreWhereUniqueInput
}


/**
 * Genre deleteMany
 */
export type GenreDeleteManyArgs = {
  where?: GenreWhereInput
}


/**
 * Genre without action
 */
export type GenreArgs = {
  /**
   * Select specific fields to fetch from the Genre
  **/
  select?: GenreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: GenreInclude | null
}



/**
 * Model Language
 */

export type Language = {
  id: number
  name: string
}


export type AggregateLanguage = {
  count: number
  avg: LanguageAvgAggregateOutputType | null
  sum: LanguageSumAggregateOutputType | null
  min: LanguageMinAggregateOutputType | null
  max: LanguageMaxAggregateOutputType | null
}

export type LanguageAvgAggregateOutputType = {
  id: number
}

export type LanguageSumAggregateOutputType = {
  id: number
}

export type LanguageMinAggregateOutputType = {
  id: number
}

export type LanguageMaxAggregateOutputType = {
  id: number
}


export type LanguageAvgAggregateInputType = {
  id?: true
}

export type LanguageSumAggregateInputType = {
  id?: true
}

export type LanguageMinAggregateInputType = {
  id?: true
}

export type LanguageMaxAggregateInputType = {
  id?: true
}

export type AggregateLanguageArgs = {
  where?: LanguageWhereInput
  orderBy?: Enumerable<LanguageOrderByInput>
  cursor?: LanguageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<LanguageDistinctFieldEnum>
  count?: true
  avg?: LanguageAvgAggregateInputType
  sum?: LanguageSumAggregateInputType
  min?: LanguageMinAggregateInputType
  max?: LanguageMaxAggregateInputType
}

export type GetLanguageAggregateType<T extends AggregateLanguageArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetLanguageAggregateScalarType<T[P]>
}

export type GetLanguageAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof LanguageAvgAggregateOutputType ? LanguageAvgAggregateOutputType[P] : never
}
    
    

export type LanguageSelect = {
  id?: boolean
  name?: boolean
  movies?: boolean | FindManyMovieArgs
  rooms?: boolean | FindManyRoomArgs
}

export type LanguageInclude = {
  movies?: boolean | FindManyMovieArgs
  rooms?: boolean | FindManyRoomArgs
}

export type LanguageGetPayload<
  S extends boolean | null | undefined | LanguageArgs,
  U = keyof S
> = S extends true
  ? Language
  : S extends undefined
  ? never
  : S extends LanguageArgs | FindManyLanguageArgs
  ? 'include' extends U
    ? Language  & {
      [P in TrueKeys<S['include']>]:
      P extends 'movies'
      ? Array<MovieGetPayload<S['include'][P]>> :
      P extends 'rooms'
      ? Array<RoomGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Language ? Language[P]
: 
      P extends 'movies'
      ? Array<MovieGetPayload<S['select'][P]>> :
      P extends 'rooms'
      ? Array<RoomGetPayload<S['select'][P]>> : never
    }
  : Language
: Language


export interface LanguageDelegate {
  /**
   * Find zero or one Language.
   * @param {FindOneLanguageArgs} args - Arguments to find a Language
   * @example
   * // Get one Language
   * const language = await prisma.language.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneLanguageArgs>(
    args: Subset<T, FindOneLanguageArgs>
  ): CheckSelect<T, Prisma__LanguageClient<Language | null>, Prisma__LanguageClient<LanguageGetPayload<T> | null>>
  /**
   * Find zero or more Languages.
   * @param {FindManyLanguageArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Languages
   * const languages = await prisma.language.findMany()
   * 
   * // Get first 10 Languages
   * const languages = await prisma.language.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const languageWithIdOnly = await prisma.language.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyLanguageArgs>(
    args?: Subset<T, FindManyLanguageArgs>
  ): CheckSelect<T, Promise<Array<Language>>, Promise<Array<LanguageGetPayload<T>>>>
  /**
   * Create a Language.
   * @param {LanguageCreateArgs} args - Arguments to create a Language.
   * @example
   * // Create one Language
   * const Language = await prisma.language.create({
   *   data: {
   *     // ... data to create a Language
   *   }
   * })
   * 
  **/
  create<T extends LanguageCreateArgs>(
    args: Subset<T, LanguageCreateArgs>
  ): CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>>
  /**
   * Delete a Language.
   * @param {LanguageDeleteArgs} args - Arguments to delete one Language.
   * @example
   * // Delete one Language
   * const Language = await prisma.language.delete({
   *   where: {
   *     // ... filter to delete one Language
   *   }
   * })
   * 
  **/
  delete<T extends LanguageDeleteArgs>(
    args: Subset<T, LanguageDeleteArgs>
  ): CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>>
  /**
   * Update one Language.
   * @param {LanguageUpdateArgs} args - Arguments to update one Language.
   * @example
   * // Update one Language
   * const language = await prisma.language.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends LanguageUpdateArgs>(
    args: Subset<T, LanguageUpdateArgs>
  ): CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>>
  /**
   * Delete zero or more Languages.
   * @param {LanguageDeleteManyArgs} args - Arguments to filter Languages to delete.
   * @example
   * // Delete a few Languages
   * const { count } = await prisma.language.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends LanguageDeleteManyArgs>(
    args: Subset<T, LanguageDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Languages.
   * @param {LanguageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Languages
   * const language = await prisma.language.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends LanguageUpdateManyArgs>(
    args: Subset<T, LanguageUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Language.
   * @param {LanguageUpsertArgs} args - Arguments to update or create a Language.
   * @example
   * // Update or create a Language
   * const language = await prisma.language.upsert({
   *   create: {
   *     // ... data to create a Language
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Language we want to update
   *   }
   * })
  **/
  upsert<T extends LanguageUpsertArgs>(
    args: Subset<T, LanguageUpsertArgs>
  ): CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyLanguageArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateLanguageArgs>(args: Subset<T, AggregateLanguageArgs>): Promise<GetLanguageAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Language.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__LanguageClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  movies<T extends FindManyMovieArgs = {}>(args?: Subset<T, FindManyMovieArgs>): CheckSelect<T, Promise<Array<Movie>>, Promise<Array<MovieGetPayload<T>>>>;

  rooms<T extends FindManyRoomArgs = {}>(args?: Subset<T, FindManyRoomArgs>): CheckSelect<T, Promise<Array<Room>>, Promise<Array<RoomGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Language findOne
 */
export type FindOneLanguageArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
  /**
   * Filter, which Language to fetch.
  **/
  where: LanguageWhereUniqueInput
}


/**
 * Language findMany
 */
export type FindManyLanguageArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
  /**
   * Filter, which Languages to fetch.
  **/
  where?: LanguageWhereInput
  /**
   * Determine the order of the Languages to fetch.
  **/
  orderBy?: Enumerable<LanguageOrderByInput>
  /**
   * Sets the position for listing Languages.
  **/
  cursor?: LanguageWhereUniqueInput
  /**
   * The number of Languages to fetch. If negative number, it will take Languages before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Languages.
  **/
  skip?: number
  distinct?: Enumerable<LanguageDistinctFieldEnum>
}


/**
 * Language create
 */
export type LanguageCreateArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
  /**
   * The data needed to create a Language.
  **/
  data: LanguageCreateInput
}


/**
 * Language update
 */
export type LanguageUpdateArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
  /**
   * The data needed to update a Language.
  **/
  data: LanguageUpdateInput
  /**
   * Choose, which Language to update.
  **/
  where: LanguageWhereUniqueInput
}


/**
 * Language updateMany
 */
export type LanguageUpdateManyArgs = {
  data: LanguageUpdateManyMutationInput
  where?: LanguageWhereInput
}


/**
 * Language upsert
 */
export type LanguageUpsertArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
  /**
   * The filter to search for the Language to update in case it exists.
  **/
  where: LanguageWhereUniqueInput
  /**
   * In case the Language found by the `where` argument doesn't exist, create a new Language with this data.
  **/
  create: LanguageCreateInput
  /**
   * In case the Language was found with the provided `where` argument, update it with this data.
  **/
  update: LanguageUpdateInput
}


/**
 * Language delete
 */
export type LanguageDeleteArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
  /**
   * Filter which Language to delete.
  **/
  where: LanguageWhereUniqueInput
}


/**
 * Language deleteMany
 */
export type LanguageDeleteManyArgs = {
  where?: LanguageWhereInput
}


/**
 * Language without action
 */
export type LanguageArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
}



/**
 * Model User
 */

export type User = {
  id: number
  createdAt: Date
  name: string
  score: number
  participantId: string | null
  hostId: string | null
  roomId: string | null
}


export type AggregateUser = {
  count: number
  avg: UserAvgAggregateOutputType | null
  sum: UserSumAggregateOutputType | null
  min: UserMinAggregateOutputType | null
  max: UserMaxAggregateOutputType | null
}

export type UserAvgAggregateOutputType = {
  id: number
  score: number
}

export type UserSumAggregateOutputType = {
  id: number
  score: number
}

export type UserMinAggregateOutputType = {
  id: number
  score: number
}

export type UserMaxAggregateOutputType = {
  id: number
  score: number
}


export type UserAvgAggregateInputType = {
  id?: true
  score?: true
}

export type UserSumAggregateInputType = {
  id?: true
  score?: true
}

export type UserMinAggregateInputType = {
  id?: true
  score?: true
}

export type UserMaxAggregateInputType = {
  id?: true
  score?: true
}

export type AggregateUserArgs = {
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput>
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
  count?: true
  avg?: UserAvgAggregateInputType
  sum?: UserSumAggregateInputType
  min?: UserMinAggregateInputType
  max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends AggregateUserArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
}

export type GetUserAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
}
    
    

export type UserSelect = {
  id?: boolean
  createdAt?: boolean
  name?: boolean
  score?: boolean
  participant?: boolean | RoomArgs
  participantId?: boolean
  host?: boolean | RoomArgs
  hostId?: boolean
  roundCompleted?: boolean | RoomArgs
  roomId?: boolean
}

export type UserInclude = {
  participant?: boolean | RoomArgs
  host?: boolean | RoomArgs
  roundCompleted?: boolean | RoomArgs
}

export type UserGetPayload<
  S extends boolean | null | undefined | UserArgs,
  U = keyof S
> = S extends true
  ? User
  : S extends undefined
  ? never
  : S extends UserArgs | FindManyUserArgs
  ? 'include' extends U
    ? User  & {
      [P in TrueKeys<S['include']>]:
      P extends 'participant'
      ? RoomGetPayload<S['include'][P]> | null :
      P extends 'host'
      ? RoomGetPayload<S['include'][P]> | null :
      P extends 'roundCompleted'
      ? RoomGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof User ? User[P]
: 
      P extends 'participant'
      ? RoomGetPayload<S['select'][P]> | null :
      P extends 'host'
      ? RoomGetPayload<S['select'][P]> | null :
      P extends 'roundCompleted'
      ? RoomGetPayload<S['select'][P]> | null : never
    }
  : User
: User


export interface UserDelegate {
  /**
   * Find zero or one User.
   * @param {FindOneUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserArgs>(
    args: Subset<T, FindOneUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find zero or more Users.
   * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyUserArgs>(
    args?: Subset<T, FindManyUserArgs>
  ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
  **/
  create<T extends UserCreateArgs>(
    args: Subset<T, UserCreateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
  **/
  delete<T extends UserDeleteArgs>(
    args: Subset<T, UserDeleteArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UserUpdateArgs>(
    args: Subset<T, UserUpdateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserDeleteManyArgs>(
    args: Subset<T, UserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserUpdateManyArgs>(
    args: Subset<T, UserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
  **/
  upsert<T extends UserUpsertArgs>(
    args: Subset<T, UserUpsertArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__UserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  participant<T extends RoomArgs = {}>(args?: Subset<T, RoomArgs>): CheckSelect<T, Prisma__RoomClient<Room | null>, Prisma__RoomClient<RoomGetPayload<T> | null>>;

  host<T extends RoomArgs = {}>(args?: Subset<T, RoomArgs>): CheckSelect<T, Prisma__RoomClient<Room | null>, Prisma__RoomClient<RoomGetPayload<T> | null>>;

  roundCompleted<T extends RoomArgs = {}>(args?: Subset<T, RoomArgs>): CheckSelect<T, Prisma__RoomClient<Room | null>, Prisma__RoomClient<RoomGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User findOne
 */
export type FindOneUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}


/**
 * User findMany
 */
export type FindManyUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: Enumerable<UserOrderByInput>
  /**
   * Sets the position for listing Users.
  **/
  cursor?: UserWhereUniqueInput
  /**
   * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Users.
  **/
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User create
 */
export type UserCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}


/**
 * User update
 */
export type UserUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}


/**
 * User updateMany
 */
export type UserUpdateManyArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput
}


/**
 * User upsert
 */
export type UserUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
  **/
  update: UserUpdateInput
}


/**
 * User delete
 */
export type UserDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}


/**
 * User deleteMany
 */
export type UserDeleteManyArgs = {
  where?: UserWhereInput
}


/**
 * User without action
 */
export type UserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
}



/**
 * Model Room
 */

export type Room = {
  id: string
  createdAt: Date
  round: number
  roundLimit: number
  roundMovieId: number | null
  languageId: number | null
}


export type AggregateRoom = {
  count: number
  avg: RoomAvgAggregateOutputType | null
  sum: RoomSumAggregateOutputType | null
  min: RoomMinAggregateOutputType | null
  max: RoomMaxAggregateOutputType | null
}

export type RoomAvgAggregateOutputType = {
  round: number
  roundLimit: number
  roundMovieId: number
  languageId: number
}

export type RoomSumAggregateOutputType = {
  round: number
  roundLimit: number
  roundMovieId: number | null
  languageId: number | null
}

export type RoomMinAggregateOutputType = {
  round: number
  roundLimit: number
  roundMovieId: number | null
  languageId: number | null
}

export type RoomMaxAggregateOutputType = {
  round: number
  roundLimit: number
  roundMovieId: number | null
  languageId: number | null
}


export type RoomAvgAggregateInputType = {
  round?: true
  roundLimit?: true
  roundMovieId?: true
  languageId?: true
}

export type RoomSumAggregateInputType = {
  round?: true
  roundLimit?: true
  roundMovieId?: true
  languageId?: true
}

export type RoomMinAggregateInputType = {
  round?: true
  roundLimit?: true
  roundMovieId?: true
  languageId?: true
}

export type RoomMaxAggregateInputType = {
  round?: true
  roundLimit?: true
  roundMovieId?: true
  languageId?: true
}

export type AggregateRoomArgs = {
  where?: RoomWhereInput
  orderBy?: Enumerable<RoomOrderByInput>
  cursor?: RoomWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<RoomDistinctFieldEnum>
  count?: true
  avg?: RoomAvgAggregateInputType
  sum?: RoomSumAggregateInputType
  min?: RoomMinAggregateInputType
  max?: RoomMaxAggregateInputType
}

export type GetRoomAggregateType<T extends AggregateRoomArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetRoomAggregateScalarType<T[P]>
}

export type GetRoomAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof RoomAvgAggregateOutputType ? RoomAvgAggregateOutputType[P] : never
}
    
    

export type RoomSelect = {
  id?: boolean
  createdAt?: boolean
  players?: boolean | FindManyUserArgs
  host?: boolean | UserArgs
  round?: boolean
  roundLimit?: boolean
  roundCompleted?: boolean | FindManyUserArgs
  roundMovieId?: boolean
  language?: boolean | LanguageArgs
  languageId?: boolean
  movies?: boolean | FindManyMovieArgs
}

export type RoomInclude = {
  players?: boolean | FindManyUserArgs
  host?: boolean | UserArgs
  roundCompleted?: boolean | FindManyUserArgs
  language?: boolean | LanguageArgs
  movies?: boolean | FindManyMovieArgs
}

export type RoomGetPayload<
  S extends boolean | null | undefined | RoomArgs,
  U = keyof S
> = S extends true
  ? Room
  : S extends undefined
  ? never
  : S extends RoomArgs | FindManyRoomArgs
  ? 'include' extends U
    ? Room  & {
      [P in TrueKeys<S['include']>]:
      P extends 'players'
      ? Array<UserGetPayload<S['include'][P]>> :
      P extends 'host'
      ? UserGetPayload<S['include'][P]> | null :
      P extends 'roundCompleted'
      ? Array<UserGetPayload<S['include'][P]>> :
      P extends 'language'
      ? LanguageGetPayload<S['include'][P]> | null :
      P extends 'movies'
      ? Array<MovieGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Room ? Room[P]
: 
      P extends 'players'
      ? Array<UserGetPayload<S['select'][P]>> :
      P extends 'host'
      ? UserGetPayload<S['select'][P]> | null :
      P extends 'roundCompleted'
      ? Array<UserGetPayload<S['select'][P]>> :
      P extends 'language'
      ? LanguageGetPayload<S['select'][P]> | null :
      P extends 'movies'
      ? Array<MovieGetPayload<S['select'][P]>> : never
    }
  : Room
: Room


export interface RoomDelegate {
  /**
   * Find zero or one Room.
   * @param {FindOneRoomArgs} args - Arguments to find a Room
   * @example
   * // Get one Room
   * const room = await prisma.room.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneRoomArgs>(
    args: Subset<T, FindOneRoomArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room | null>, Prisma__RoomClient<RoomGetPayload<T> | null>>
  /**
   * Find zero or more Rooms.
   * @param {FindManyRoomArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Rooms
   * const rooms = await prisma.room.findMany()
   * 
   * // Get first 10 Rooms
   * const rooms = await prisma.room.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyRoomArgs>(
    args?: Subset<T, FindManyRoomArgs>
  ): CheckSelect<T, Promise<Array<Room>>, Promise<Array<RoomGetPayload<T>>>>
  /**
   * Create a Room.
   * @param {RoomCreateArgs} args - Arguments to create a Room.
   * @example
   * // Create one Room
   * const Room = await prisma.room.create({
   *   data: {
   *     // ... data to create a Room
   *   }
   * })
   * 
  **/
  create<T extends RoomCreateArgs>(
    args: Subset<T, RoomCreateArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>
  /**
   * Delete a Room.
   * @param {RoomDeleteArgs} args - Arguments to delete one Room.
   * @example
   * // Delete one Room
   * const Room = await prisma.room.delete({
   *   where: {
   *     // ... filter to delete one Room
   *   }
   * })
   * 
  **/
  delete<T extends RoomDeleteArgs>(
    args: Subset<T, RoomDeleteArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>
  /**
   * Update one Room.
   * @param {RoomUpdateArgs} args - Arguments to update one Room.
   * @example
   * // Update one Room
   * const room = await prisma.room.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends RoomUpdateArgs>(
    args: Subset<T, RoomUpdateArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>
  /**
   * Delete zero or more Rooms.
   * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
   * @example
   * // Delete a few Rooms
   * const { count } = await prisma.room.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends RoomDeleteManyArgs>(
    args: Subset<T, RoomDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Rooms.
   * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Rooms
   * const room = await prisma.room.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends RoomUpdateManyArgs>(
    args: Subset<T, RoomUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Room.
   * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
   * @example
   * // Update or create a Room
   * const room = await prisma.room.upsert({
   *   create: {
   *     // ... data to create a Room
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Room we want to update
   *   }
   * })
  **/
  upsert<T extends RoomUpsertArgs>(
    args: Subset<T, RoomUpsertArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyRoomArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateRoomArgs>(args: Subset<T, AggregateRoomArgs>): Promise<GetRoomAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Room.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__RoomClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  players<T extends FindManyUserArgs = {}>(args?: Subset<T, FindManyUserArgs>): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>;

  host<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  roundCompleted<T extends FindManyUserArgs = {}>(args?: Subset<T, FindManyUserArgs>): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>;

  language<T extends LanguageArgs = {}>(args?: Subset<T, LanguageArgs>): CheckSelect<T, Prisma__LanguageClient<Language | null>, Prisma__LanguageClient<LanguageGetPayload<T> | null>>;

  movies<T extends FindManyMovieArgs = {}>(args?: Subset<T, FindManyMovieArgs>): CheckSelect<T, Promise<Array<Movie>>, Promise<Array<MovieGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Room findOne
 */
export type FindOneRoomArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
  /**
   * Filter, which Room to fetch.
  **/
  where: RoomWhereUniqueInput
}


/**
 * Room findMany
 */
export type FindManyRoomArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
  /**
   * Filter, which Rooms to fetch.
  **/
  where?: RoomWhereInput
  /**
   * Determine the order of the Rooms to fetch.
  **/
  orderBy?: Enumerable<RoomOrderByInput>
  /**
   * Sets the position for listing Rooms.
  **/
  cursor?: RoomWhereUniqueInput
  /**
   * The number of Rooms to fetch. If negative number, it will take Rooms before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Rooms.
  **/
  skip?: number
  distinct?: Enumerable<RoomDistinctFieldEnum>
}


/**
 * Room create
 */
export type RoomCreateArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
  /**
   * The data needed to create a Room.
  **/
  data: RoomCreateInput
}


/**
 * Room update
 */
export type RoomUpdateArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
  /**
   * The data needed to update a Room.
  **/
  data: RoomUpdateInput
  /**
   * Choose, which Room to update.
  **/
  where: RoomWhereUniqueInput
}


/**
 * Room updateMany
 */
export type RoomUpdateManyArgs = {
  data: RoomUpdateManyMutationInput
  where?: RoomWhereInput
}


/**
 * Room upsert
 */
export type RoomUpsertArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
  /**
   * The filter to search for the Room to update in case it exists.
  **/
  where: RoomWhereUniqueInput
  /**
   * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
  **/
  create: RoomCreateInput
  /**
   * In case the Room was found with the provided `where` argument, update it with this data.
  **/
  update: RoomUpdateInput
}


/**
 * Room delete
 */
export type RoomDeleteArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
  /**
   * Filter which Room to delete.
  **/
  where: RoomWhereUniqueInput
}


/**
 * Room deleteMany
 */
export type RoomDeleteManyArgs = {
  where?: RoomWhereInput
}


/**
 * Room without action
 */
export type RoomArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
}



/**
 * Deep Input Types
 */


export type MovieWhereInput = {
  AND?: Enumerable<MovieWhereInput>
  OR?: Array<MovieWhereInput>
  NOT?: Enumerable<MovieWhereInput>
  id?: number | IntFilter
  createdAt?: Date | string | DateTimeFilter
  name?: string | StringFilter
  directorId?: number | IntFilter
  director?: PersonWhereInput | null
  cast?: PersonListRelationFilter
  releaseDate?: Date | string | DateTimeFilter
  genre?: GenreListRelationFilter
  boxOffice?: number | FloatFilter
  language?: LanguageWhereInput | null
  languageId?: number | IntFilter
  rooms?: RoomListRelationFilter
}

export type MovieOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  name?: SortOrder
  directorId?: SortOrder
  releaseDate?: SortOrder
  boxOffice?: SortOrder
  languageId?: SortOrder
}

export type MovieWhereUniqueInput = {
  id?: number
  name?: string
}

export type PersonWhereInput = {
  AND?: Enumerable<PersonWhereInput>
  OR?: Array<PersonWhereInput>
  NOT?: Enumerable<PersonWhereInput>
  id?: number | IntFilter
  name?: string | StringFilter
  acted?: MovieListRelationFilter
  directed?: MovieListRelationFilter
}

export type PersonOrderByInput = {
  id?: SortOrder
  name?: SortOrder
}

export type PersonWhereUniqueInput = {
  id?: number
  name?: string
}

export type GenreWhereInput = {
  AND?: Enumerable<GenreWhereInput>
  OR?: Array<GenreWhereInput>
  NOT?: Enumerable<GenreWhereInput>
  id?: number | IntFilter
  name?: string | StringFilter
  movies?: MovieListRelationFilter
}

export type GenreOrderByInput = {
  id?: SortOrder
  name?: SortOrder
}

export type GenreWhereUniqueInput = {
  id?: number
  name?: string
}

export type LanguageWhereInput = {
  AND?: Enumerable<LanguageWhereInput>
  OR?: Array<LanguageWhereInput>
  NOT?: Enumerable<LanguageWhereInput>
  id?: number | IntFilter
  name?: string | StringFilter
  movies?: MovieListRelationFilter
  rooms?: RoomListRelationFilter
}

export type LanguageOrderByInput = {
  id?: SortOrder
  name?: SortOrder
}

export type LanguageWhereUniqueInput = {
  id?: number
  name?: string
}

export type UserWhereInput = {
  AND?: Enumerable<UserWhereInput>
  OR?: Array<UserWhereInput>
  NOT?: Enumerable<UserWhereInput>
  id?: number | IntFilter
  createdAt?: Date | string | DateTimeFilter
  name?: string | StringFilter
  score?: number | IntFilter
  participant?: RoomWhereInput | null
  participantId?: string | StringNullableFilter | null
  host?: RoomWhereInput | null
  hostId?: string | StringNullableFilter | null
  roundCompleted?: RoomWhereInput | null
  roomId?: string | StringNullableFilter | null
}

export type UserOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  name?: SortOrder
  score?: SortOrder
  participantId?: SortOrder
  hostId?: SortOrder
  roomId?: SortOrder
}

export type UserWhereUniqueInput = {
  id?: number
}

export type RoomWhereInput = {
  AND?: Enumerable<RoomWhereInput>
  OR?: Array<RoomWhereInput>
  NOT?: Enumerable<RoomWhereInput>
  id?: string | StringFilter
  createdAt?: Date | string | DateTimeFilter
  players?: UserListRelationFilter
  host?: UserWhereInput | null
  round?: number | IntFilter
  roundLimit?: number | IntFilter
  roundCompleted?: UserListRelationFilter
  roundMovieId?: number | IntNullableFilter | null
  language?: LanguageWhereInput | null
  languageId?: number | IntNullableFilter | null
  movies?: MovieListRelationFilter
}

export type RoomOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  round?: SortOrder
  roundLimit?: SortOrder
  roundMovieId?: SortOrder
  languageId?: SortOrder
}

export type RoomWhereUniqueInput = {
  id?: string
}

export type MovieCreateInput = {
  createdAt?: Date | string
  name: string
  releaseDate: Date | string
  boxOffice: number
  director: PersonCreateOneWithoutDirectedInput
  cast?: PersonCreateManyWithoutActedInput
  genre?: GenreCreateManyWithoutMoviesInput
  language: LanguageCreateOneWithoutMoviesInput
  rooms?: RoomCreateManyWithoutMoviesInput
}

export type MovieUpdateInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  releaseDate?: Date | string | DateTimeFieldUpdateOperationsInput
  boxOffice?: number | FloatFieldUpdateOperationsInput
  director?: PersonUpdateOneRequiredWithoutDirectedInput
  cast?: PersonUpdateManyWithoutActedInput
  genre?: GenreUpdateManyWithoutMoviesInput
  language?: LanguageUpdateOneRequiredWithoutMoviesInput
  rooms?: RoomUpdateManyWithoutMoviesInput
}

export type MovieUpdateManyMutationInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  releaseDate?: Date | string | DateTimeFieldUpdateOperationsInput
  boxOffice?: number | FloatFieldUpdateOperationsInput
}

export type PersonCreateInput = {
  name: string
  acted?: MovieCreateManyWithoutCastInput
  directed?: MovieCreateManyWithoutDirectorInput
}

export type PersonUpdateInput = {
  name?: string | StringFieldUpdateOperationsInput
  acted?: MovieUpdateManyWithoutCastInput
  directed?: MovieUpdateManyWithoutDirectorInput
}

export type PersonUpdateManyMutationInput = {
  name?: string | StringFieldUpdateOperationsInput
}

export type GenreCreateInput = {
  name: string
  movies?: MovieCreateManyWithoutGenreInput
}

export type GenreUpdateInput = {
  name?: string | StringFieldUpdateOperationsInput
  movies?: MovieUpdateManyWithoutGenreInput
}

export type GenreUpdateManyMutationInput = {
  name?: string | StringFieldUpdateOperationsInput
}

export type LanguageCreateInput = {
  name: string
  movies?: MovieCreateManyWithoutLanguageInput
  rooms?: RoomCreateManyWithoutLanguageInput
}

export type LanguageUpdateInput = {
  name?: string | StringFieldUpdateOperationsInput
  movies?: MovieUpdateManyWithoutLanguageInput
  rooms?: RoomUpdateManyWithoutLanguageInput
}

export type LanguageUpdateManyMutationInput = {
  name?: string | StringFieldUpdateOperationsInput
}

export type UserCreateInput = {
  createdAt?: Date | string
  name: string
  score: number
  participant?: RoomCreateOneWithoutPlayersInput
  host?: RoomCreateOneWithoutHostInput
  roundCompleted?: RoomCreateOneWithoutRoundCompletedInput
}

export type UserUpdateInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  score?: number | IntFieldUpdateOperationsInput
  participant?: RoomUpdateOneWithoutPlayersInput
  host?: RoomUpdateOneWithoutHostInput
  roundCompleted?: RoomUpdateOneWithoutRoundCompletedInput
}

export type UserUpdateManyMutationInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  score?: number | IntFieldUpdateOperationsInput
}

export type RoomCreateInput = {
  id?: string
  createdAt?: Date | string
  round: number
  roundLimit: number
  roundMovieId?: number | null
  players?: UserCreateManyWithoutParticipantInput
  host?: UserCreateOneWithoutHostInput
  roundCompleted?: UserCreateManyWithoutRoundCompletedInput
  language?: LanguageCreateOneWithoutRoomsInput
  movies?: MovieCreateManyWithoutRoomsInput
}

export type RoomUpdateInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  round?: number | IntFieldUpdateOperationsInput
  roundLimit?: number | IntFieldUpdateOperationsInput
  roundMovieId?: number | NullableIntFieldUpdateOperationsInput | null
  players?: UserUpdateManyWithoutParticipantInput
  host?: UserUpdateOneWithoutHostInput
  roundCompleted?: UserUpdateManyWithoutRoundCompletedInput
  language?: LanguageUpdateOneWithoutRoomsInput
  movies?: MovieUpdateManyWithoutRoomsInput
}

export type RoomUpdateManyMutationInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  round?: number | IntFieldUpdateOperationsInput
  roundLimit?: number | IntFieldUpdateOperationsInput
  roundMovieId?: number | NullableIntFieldUpdateOperationsInput | null
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date | string>
  notIn?: Enumerable<Date | string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type PersonRelationFilter = {
  is?: PersonWhereInput | null
  isNot?: PersonWhereInput | null
}

export type PersonListRelationFilter = {
  every?: PersonWhereInput
  some?: PersonWhereInput
  none?: PersonWhereInput
}

export type GenreListRelationFilter = {
  every?: GenreWhereInput
  some?: GenreWhereInput
  none?: GenreWhereInput
}

export type FloatFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedFloatFilter
}

export type LanguageRelationFilter = {
  is?: LanguageWhereInput | null
  isNot?: LanguageWhereInput | null
}

export type RoomListRelationFilter = {
  every?: RoomWhereInput
  some?: RoomWhereInput
  none?: RoomWhereInput
}

export type MovieListRelationFilter = {
  every?: MovieWhereInput
  some?: MovieWhereInput
  none?: MovieWhereInput
}

export type RoomRelationFilter = {
  is?: RoomWhereInput | null
  isNot?: RoomWhereInput | null
}

export type StringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: string | NestedStringNullableFilter | null
}

export type UserListRelationFilter = {
  every?: UserWhereInput
  some?: UserWhereInput
  none?: UserWhereInput
}

export type UserRelationFilter = {
  is?: UserWhereInput | null
  isNot?: UserWhereInput | null
}

export type IntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
  not?: number | NestedIntNullableFilter | null
}

export type PersonCreateOneWithoutDirectedInput = {
  create?: PersonCreateWithoutDirectedInput
  connect?: PersonWhereUniqueInput
  connectOrCreate?: PersonCreateOrConnectWithoutMovieInput
}

export type PersonCreateManyWithoutActedInput = {
  create?: Enumerable<PersonCreateWithoutActedInput>
  connect?: Enumerable<PersonWhereUniqueInput>
  connectOrCreate?: Enumerable<PersonCreateOrConnectWithoutMovieInput>
}

export type GenreCreateManyWithoutMoviesInput = {
  create?: Enumerable<GenreCreateWithoutMoviesInput>
  connect?: Enumerable<GenreWhereUniqueInput>
  connectOrCreate?: Enumerable<GenreCreateOrConnectWithoutMovieInput>
}

export type LanguageCreateOneWithoutMoviesInput = {
  create?: LanguageCreateWithoutMoviesInput
  connect?: LanguageWhereUniqueInput
  connectOrCreate?: LanguageCreateOrConnectWithoutMovieInput
}

export type RoomCreateManyWithoutMoviesInput = {
  create?: Enumerable<RoomCreateWithoutMoviesInput>
  connect?: Enumerable<RoomWhereUniqueInput>
  connectOrCreate?: Enumerable<RoomCreateOrConnectWithoutMovieInput>
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
}

export type PersonUpdateOneRequiredWithoutDirectedInput = {
  create?: PersonCreateWithoutDirectedInput
  connect?: PersonWhereUniqueInput
  update?: PersonUpdateWithoutDirectedDataInput
  upsert?: PersonUpsertWithoutDirectedInput
  connectOrCreate?: PersonCreateOrConnectWithoutMovieInput
}

export type PersonUpdateManyWithoutActedInput = {
  create?: Enumerable<PersonCreateWithoutActedInput>
  connect?: Enumerable<PersonWhereUniqueInput>
  set?: Enumerable<PersonWhereUniqueInput>
  disconnect?: Enumerable<PersonWhereUniqueInput>
  delete?: Enumerable<PersonWhereUniqueInput>
  update?: Enumerable<PersonUpdateWithWhereUniqueWithoutActedInput>
  updateMany?: Enumerable<PersonUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<PersonScalarWhereInput>
  upsert?: Enumerable<PersonUpsertWithWhereUniqueWithoutActedInput>
  connectOrCreate?: Enumerable<PersonCreateOrConnectWithoutMovieInput>
}

export type GenreUpdateManyWithoutMoviesInput = {
  create?: Enumerable<GenreCreateWithoutMoviesInput>
  connect?: Enumerable<GenreWhereUniqueInput>
  set?: Enumerable<GenreWhereUniqueInput>
  disconnect?: Enumerable<GenreWhereUniqueInput>
  delete?: Enumerable<GenreWhereUniqueInput>
  update?: Enumerable<GenreUpdateWithWhereUniqueWithoutMoviesInput>
  updateMany?: Enumerable<GenreUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<GenreScalarWhereInput>
  upsert?: Enumerable<GenreUpsertWithWhereUniqueWithoutMoviesInput>
  connectOrCreate?: Enumerable<GenreCreateOrConnectWithoutMovieInput>
}

export type LanguageUpdateOneRequiredWithoutMoviesInput = {
  create?: LanguageCreateWithoutMoviesInput
  connect?: LanguageWhereUniqueInput
  update?: LanguageUpdateWithoutMoviesDataInput
  upsert?: LanguageUpsertWithoutMoviesInput
  connectOrCreate?: LanguageCreateOrConnectWithoutMovieInput
}

export type RoomUpdateManyWithoutMoviesInput = {
  create?: Enumerable<RoomCreateWithoutMoviesInput>
  connect?: Enumerable<RoomWhereUniqueInput>
  set?: Enumerable<RoomWhereUniqueInput>
  disconnect?: Enumerable<RoomWhereUniqueInput>
  delete?: Enumerable<RoomWhereUniqueInput>
  update?: Enumerable<RoomUpdateWithWhereUniqueWithoutMoviesInput>
  updateMany?: Enumerable<RoomUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<RoomScalarWhereInput>
  upsert?: Enumerable<RoomUpsertWithWhereUniqueWithoutMoviesInput>
  connectOrCreate?: Enumerable<RoomCreateOrConnectWithoutMovieInput>
}

export type MovieCreateManyWithoutCastInput = {
  create?: Enumerable<MovieCreateWithoutCastInput>
  connect?: Enumerable<MovieWhereUniqueInput>
  connectOrCreate?: Enumerable<MovieCreateOrConnectWithoutPersonInput>
}

export type MovieCreateManyWithoutDirectorInput = {
  create?: Enumerable<MovieCreateWithoutDirectorInput>
  connect?: Enumerable<MovieWhereUniqueInput>
  connectOrCreate?: Enumerable<MovieCreateOrConnectWithoutPersonInput>
}

export type MovieUpdateManyWithoutCastInput = {
  create?: Enumerable<MovieCreateWithoutCastInput>
  connect?: Enumerable<MovieWhereUniqueInput>
  set?: Enumerable<MovieWhereUniqueInput>
  disconnect?: Enumerable<MovieWhereUniqueInput>
  delete?: Enumerable<MovieWhereUniqueInput>
  update?: Enumerable<MovieUpdateWithWhereUniqueWithoutCastInput>
  updateMany?: Enumerable<MovieUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<MovieScalarWhereInput>
  upsert?: Enumerable<MovieUpsertWithWhereUniqueWithoutCastInput>
  connectOrCreate?: Enumerable<MovieCreateOrConnectWithoutPersonInput>
}

export type MovieUpdateManyWithoutDirectorInput = {
  create?: Enumerable<MovieCreateWithoutDirectorInput>
  connect?: Enumerable<MovieWhereUniqueInput>
  set?: Enumerable<MovieWhereUniqueInput>
  disconnect?: Enumerable<MovieWhereUniqueInput>
  delete?: Enumerable<MovieWhereUniqueInput>
  update?: Enumerable<MovieUpdateWithWhereUniqueWithoutDirectorInput>
  updateMany?: Enumerable<MovieUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<MovieScalarWhereInput>
  upsert?: Enumerable<MovieUpsertWithWhereUniqueWithoutDirectorInput>
  connectOrCreate?: Enumerable<MovieCreateOrConnectWithoutPersonInput>
}

export type MovieCreateManyWithoutGenreInput = {
  create?: Enumerable<MovieCreateWithoutGenreInput>
  connect?: Enumerable<MovieWhereUniqueInput>
  connectOrCreate?: Enumerable<MovieCreateOrConnectWithoutGenreInput>
}

export type MovieUpdateManyWithoutGenreInput = {
  create?: Enumerable<MovieCreateWithoutGenreInput>
  connect?: Enumerable<MovieWhereUniqueInput>
  set?: Enumerable<MovieWhereUniqueInput>
  disconnect?: Enumerable<MovieWhereUniqueInput>
  delete?: Enumerable<MovieWhereUniqueInput>
  update?: Enumerable<MovieUpdateWithWhereUniqueWithoutGenreInput>
  updateMany?: Enumerable<MovieUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<MovieScalarWhereInput>
  upsert?: Enumerable<MovieUpsertWithWhereUniqueWithoutGenreInput>
  connectOrCreate?: Enumerable<MovieCreateOrConnectWithoutGenreInput>
}

export type MovieCreateManyWithoutLanguageInput = {
  create?: Enumerable<MovieCreateWithoutLanguageInput>
  connect?: Enumerable<MovieWhereUniqueInput>
  connectOrCreate?: Enumerable<MovieCreateOrConnectWithoutLanguageInput>
}

export type RoomCreateManyWithoutLanguageInput = {
  create?: Enumerable<RoomCreateWithoutLanguageInput>
  connect?: Enumerable<RoomWhereUniqueInput>
  connectOrCreate?: Enumerable<RoomCreateOrConnectWithoutLanguageInput>
}

export type MovieUpdateManyWithoutLanguageInput = {
  create?: Enumerable<MovieCreateWithoutLanguageInput>
  connect?: Enumerable<MovieWhereUniqueInput>
  set?: Enumerable<MovieWhereUniqueInput>
  disconnect?: Enumerable<MovieWhereUniqueInput>
  delete?: Enumerable<MovieWhereUniqueInput>
  update?: Enumerable<MovieUpdateWithWhereUniqueWithoutLanguageInput>
  updateMany?: Enumerable<MovieUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<MovieScalarWhereInput>
  upsert?: Enumerable<MovieUpsertWithWhereUniqueWithoutLanguageInput>
  connectOrCreate?: Enumerable<MovieCreateOrConnectWithoutLanguageInput>
}

export type RoomUpdateManyWithoutLanguageInput = {
  create?: Enumerable<RoomCreateWithoutLanguageInput>
  connect?: Enumerable<RoomWhereUniqueInput>
  set?: Enumerable<RoomWhereUniqueInput>
  disconnect?: Enumerable<RoomWhereUniqueInput>
  delete?: Enumerable<RoomWhereUniqueInput>
  update?: Enumerable<RoomUpdateWithWhereUniqueWithoutLanguageInput>
  updateMany?: Enumerable<RoomUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<RoomScalarWhereInput>
  upsert?: Enumerable<RoomUpsertWithWhereUniqueWithoutLanguageInput>
  connectOrCreate?: Enumerable<RoomCreateOrConnectWithoutLanguageInput>
}

export type RoomCreateOneWithoutPlayersInput = {
  create?: RoomCreateWithoutPlayersInput
  connect?: RoomWhereUniqueInput
  connectOrCreate?: RoomCreateOrConnectWithoutUserInput
}

export type RoomCreateOneWithoutHostInput = {
  create?: RoomCreateWithoutHostInput
  connect?: RoomWhereUniqueInput
  connectOrCreate?: RoomCreateOrConnectWithoutUserInput
}

export type RoomCreateOneWithoutRoundCompletedInput = {
  create?: RoomCreateWithoutRoundCompletedInput
  connect?: RoomWhereUniqueInput
  connectOrCreate?: RoomCreateOrConnectWithoutUserInput
}

export type IntFieldUpdateOperationsInput = {
  set?: number
}

export type RoomUpdateOneWithoutPlayersInput = {
  create?: RoomCreateWithoutPlayersInput
  connect?: RoomWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: RoomUpdateWithoutPlayersDataInput
  upsert?: RoomUpsertWithoutPlayersInput
  connectOrCreate?: RoomCreateOrConnectWithoutUserInput
}

export type RoomUpdateOneWithoutHostInput = {
  create?: RoomCreateWithoutHostInput
  connect?: RoomWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: RoomUpdateWithoutHostDataInput
  upsert?: RoomUpsertWithoutHostInput
  connectOrCreate?: RoomCreateOrConnectWithoutUserInput
}

export type RoomUpdateOneWithoutRoundCompletedInput = {
  create?: RoomCreateWithoutRoundCompletedInput
  connect?: RoomWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: RoomUpdateWithoutRoundCompletedDataInput
  upsert?: RoomUpsertWithoutRoundCompletedInput
  connectOrCreate?: RoomCreateOrConnectWithoutUserInput
}

export type UserCreateManyWithoutParticipantInput = {
  create?: Enumerable<UserCreateWithoutParticipantInput>
  connect?: Enumerable<UserWhereUniqueInput>
  connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoomInput>
}

export type UserCreateOneWithoutHostInput = {
  create?: UserCreateWithoutHostInput
  connect?: UserWhereUniqueInput
  connectOrCreate?: UserCreateOrConnectWithoutRoomInput
}

export type UserCreateManyWithoutRoundCompletedInput = {
  create?: Enumerable<UserCreateWithoutRoundCompletedInput>
  connect?: Enumerable<UserWhereUniqueInput>
  connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoomInput>
}

export type LanguageCreateOneWithoutRoomsInput = {
  create?: LanguageCreateWithoutRoomsInput
  connect?: LanguageWhereUniqueInput
  connectOrCreate?: LanguageCreateOrConnectWithoutRoomInput
}

export type MovieCreateManyWithoutRoomsInput = {
  create?: Enumerable<MovieCreateWithoutRoomsInput>
  connect?: Enumerable<MovieWhereUniqueInput>
  connectOrCreate?: Enumerable<MovieCreateOrConnectWithoutRoomInput>
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
}

export type UserUpdateManyWithoutParticipantInput = {
  create?: Enumerable<UserCreateWithoutParticipantInput>
  connect?: Enumerable<UserWhereUniqueInput>
  set?: Enumerable<UserWhereUniqueInput>
  disconnect?: Enumerable<UserWhereUniqueInput>
  delete?: Enumerable<UserWhereUniqueInput>
  update?: Enumerable<UserUpdateWithWhereUniqueWithoutParticipantInput>
  updateMany?: Enumerable<UserUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<UserScalarWhereInput>
  upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutParticipantInput>
  connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoomInput>
}

export type UserUpdateOneWithoutHostInput = {
  create?: UserCreateWithoutHostInput
  connect?: UserWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: UserUpdateWithoutHostDataInput
  upsert?: UserUpsertWithoutHostInput
  connectOrCreate?: UserCreateOrConnectWithoutRoomInput
}

export type UserUpdateManyWithoutRoundCompletedInput = {
  create?: Enumerable<UserCreateWithoutRoundCompletedInput>
  connect?: Enumerable<UserWhereUniqueInput>
  set?: Enumerable<UserWhereUniqueInput>
  disconnect?: Enumerable<UserWhereUniqueInput>
  delete?: Enumerable<UserWhereUniqueInput>
  update?: Enumerable<UserUpdateWithWhereUniqueWithoutRoundCompletedInput>
  updateMany?: Enumerable<UserUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<UserScalarWhereInput>
  upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRoundCompletedInput>
  connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoomInput>
}

export type LanguageUpdateOneWithoutRoomsInput = {
  create?: LanguageCreateWithoutRoomsInput
  connect?: LanguageWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: LanguageUpdateWithoutRoomsDataInput
  upsert?: LanguageUpsertWithoutRoomsInput
  connectOrCreate?: LanguageCreateOrConnectWithoutRoomInput
}

export type MovieUpdateManyWithoutRoomsInput = {
  create?: Enumerable<MovieCreateWithoutRoomsInput>
  connect?: Enumerable<MovieWhereUniqueInput>
  set?: Enumerable<MovieWhereUniqueInput>
  disconnect?: Enumerable<MovieWhereUniqueInput>
  delete?: Enumerable<MovieWhereUniqueInput>
  update?: Enumerable<MovieUpdateWithWhereUniqueWithoutRoomsInput>
  updateMany?: Enumerable<MovieUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<MovieScalarWhereInput>
  upsert?: Enumerable<MovieUpsertWithWhereUniqueWithoutRoomsInput>
  connectOrCreate?: Enumerable<MovieCreateOrConnectWithoutRoomInput>
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntFilter | null
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date | string>
  notIn?: Enumerable<Date | string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: NestedDateTimeFilter | null
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: NestedStringFilter | null
}

export type NestedFloatFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedFloatFilter | null
}

export type NestedStringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: NestedStringNullableFilter | null
}

export type NestedIntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
  not?: NestedIntNullableFilter | null
}

export type PersonCreateWithoutDirectedInput = {
  name: string
  acted?: MovieCreateManyWithoutCastInput
}

export type PersonCreateOrConnectWithoutMovieInput = {
  where: PersonWhereUniqueInput
  create: PersonCreateWithoutDirectedInput
}

export type PersonCreateWithoutActedInput = {
  name: string
  directed?: MovieCreateManyWithoutDirectorInput
}

export type GenreCreateWithoutMoviesInput = {
  name: string
}

export type GenreCreateOrConnectWithoutMovieInput = {
  where: GenreWhereUniqueInput
  create: GenreCreateWithoutMoviesInput
}

export type LanguageCreateWithoutMoviesInput = {
  name: string
  rooms?: RoomCreateManyWithoutLanguageInput
}

export type LanguageCreateOrConnectWithoutMovieInput = {
  where: LanguageWhereUniqueInput
  create: LanguageCreateWithoutMoviesInput
}

export type RoomCreateWithoutMoviesInput = {
  id?: string
  createdAt?: Date | string
  round: number
  roundLimit: number
  roundMovieId?: number | null
  players?: UserCreateManyWithoutParticipantInput
  host?: UserCreateOneWithoutHostInput
  roundCompleted?: UserCreateManyWithoutRoundCompletedInput
  language?: LanguageCreateOneWithoutRoomsInput
}

export type RoomCreateOrConnectWithoutMovieInput = {
  where: RoomWhereUniqueInput
  create: RoomCreateWithoutMoviesInput
}

export type PersonUpdateWithoutDirectedDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  acted?: MovieUpdateManyWithoutCastInput
}

export type PersonUpsertWithoutDirectedInput = {
  update: PersonUpdateWithoutDirectedDataInput
  create: PersonCreateWithoutDirectedInput
}

export type PersonUpdateWithWhereUniqueWithoutActedInput = {
  where: PersonWhereUniqueInput
  data: PersonUpdateWithoutActedDataInput
}

export type PersonUpdateManyWithWhereNestedInput = {
  where: PersonScalarWhereInput
  data: PersonUpdateManyDataInput
}

export type PersonScalarWhereInput = {
  AND?: Enumerable<PersonScalarWhereInput>
  OR?: Array<PersonScalarWhereInput>
  NOT?: Enumerable<PersonScalarWhereInput>
  id?: number | IntFilter
  name?: string | StringFilter
}

export type PersonUpsertWithWhereUniqueWithoutActedInput = {
  where: PersonWhereUniqueInput
  update: PersonUpdateWithoutActedDataInput
  create: PersonCreateWithoutActedInput
}

export type GenreUpdateWithWhereUniqueWithoutMoviesInput = {
  where: GenreWhereUniqueInput
  data: GenreUpdateWithoutMoviesDataInput
}

export type GenreUpdateManyWithWhereNestedInput = {
  where: GenreScalarWhereInput
  data: GenreUpdateManyDataInput
}

export type GenreScalarWhereInput = {
  AND?: Enumerable<GenreScalarWhereInput>
  OR?: Array<GenreScalarWhereInput>
  NOT?: Enumerable<GenreScalarWhereInput>
  id?: number | IntFilter
  name?: string | StringFilter
}

export type GenreUpsertWithWhereUniqueWithoutMoviesInput = {
  where: GenreWhereUniqueInput
  update: GenreUpdateWithoutMoviesDataInput
  create: GenreCreateWithoutMoviesInput
}

export type LanguageUpdateWithoutMoviesDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  rooms?: RoomUpdateManyWithoutLanguageInput
}

export type LanguageUpsertWithoutMoviesInput = {
  update: LanguageUpdateWithoutMoviesDataInput
  create: LanguageCreateWithoutMoviesInput
}

export type RoomUpdateWithWhereUniqueWithoutMoviesInput = {
  where: RoomWhereUniqueInput
  data: RoomUpdateWithoutMoviesDataInput
}

export type RoomUpdateManyWithWhereNestedInput = {
  where: RoomScalarWhereInput
  data: RoomUpdateManyDataInput
}

export type RoomScalarWhereInput = {
  AND?: Enumerable<RoomScalarWhereInput>
  OR?: Array<RoomScalarWhereInput>
  NOT?: Enumerable<RoomScalarWhereInput>
  id?: string | StringFilter
  createdAt?: Date | string | DateTimeFilter
  round?: number | IntFilter
  roundLimit?: number | IntFilter
  roundMovieId?: number | IntNullableFilter | null
  languageId?: number | IntNullableFilter | null
}

export type RoomUpsertWithWhereUniqueWithoutMoviesInput = {
  where: RoomWhereUniqueInput
  update: RoomUpdateWithoutMoviesDataInput
  create: RoomCreateWithoutMoviesInput
}

export type MovieCreateWithoutCastInput = {
  createdAt?: Date | string
  name: string
  releaseDate: Date | string
  boxOffice: number
  director: PersonCreateOneWithoutDirectedInput
  genre?: GenreCreateManyWithoutMoviesInput
  language: LanguageCreateOneWithoutMoviesInput
  rooms?: RoomCreateManyWithoutMoviesInput
}

export type MovieCreateOrConnectWithoutPersonInput = {
  where: MovieWhereUniqueInput
  create: MovieCreateWithoutCastInput
}

export type MovieCreateWithoutDirectorInput = {
  createdAt?: Date | string
  name: string
  releaseDate: Date | string
  boxOffice: number
  cast?: PersonCreateManyWithoutActedInput
  genre?: GenreCreateManyWithoutMoviesInput
  language: LanguageCreateOneWithoutMoviesInput
  rooms?: RoomCreateManyWithoutMoviesInput
}

export type MovieUpdateWithWhereUniqueWithoutCastInput = {
  where: MovieWhereUniqueInput
  data: MovieUpdateWithoutCastDataInput
}

export type MovieUpdateManyWithWhereNestedInput = {
  where: MovieScalarWhereInput
  data: MovieUpdateManyDataInput
}

export type MovieScalarWhereInput = {
  AND?: Enumerable<MovieScalarWhereInput>
  OR?: Array<MovieScalarWhereInput>
  NOT?: Enumerable<MovieScalarWhereInput>
  id?: number | IntFilter
  createdAt?: Date | string | DateTimeFilter
  name?: string | StringFilter
  directorId?: number | IntFilter
  releaseDate?: Date | string | DateTimeFilter
  boxOffice?: number | FloatFilter
  languageId?: number | IntFilter
}

export type MovieUpsertWithWhereUniqueWithoutCastInput = {
  where: MovieWhereUniqueInput
  update: MovieUpdateWithoutCastDataInput
  create: MovieCreateWithoutCastInput
}

export type MovieUpdateWithWhereUniqueWithoutDirectorInput = {
  where: MovieWhereUniqueInput
  data: MovieUpdateWithoutDirectorDataInput
}

export type MovieUpsertWithWhereUniqueWithoutDirectorInput = {
  where: MovieWhereUniqueInput
  update: MovieUpdateWithoutDirectorDataInput
  create: MovieCreateWithoutDirectorInput
}

export type MovieCreateWithoutGenreInput = {
  createdAt?: Date | string
  name: string
  releaseDate: Date | string
  boxOffice: number
  director: PersonCreateOneWithoutDirectedInput
  cast?: PersonCreateManyWithoutActedInput
  language: LanguageCreateOneWithoutMoviesInput
  rooms?: RoomCreateManyWithoutMoviesInput
}

export type MovieCreateOrConnectWithoutGenreInput = {
  where: MovieWhereUniqueInput
  create: MovieCreateWithoutGenreInput
}

export type MovieUpdateWithWhereUniqueWithoutGenreInput = {
  where: MovieWhereUniqueInput
  data: MovieUpdateWithoutGenreDataInput
}

export type MovieUpsertWithWhereUniqueWithoutGenreInput = {
  where: MovieWhereUniqueInput
  update: MovieUpdateWithoutGenreDataInput
  create: MovieCreateWithoutGenreInput
}

export type MovieCreateWithoutLanguageInput = {
  createdAt?: Date | string
  name: string
  releaseDate: Date | string
  boxOffice: number
  director: PersonCreateOneWithoutDirectedInput
  cast?: PersonCreateManyWithoutActedInput
  genre?: GenreCreateManyWithoutMoviesInput
  rooms?: RoomCreateManyWithoutMoviesInput
}

export type MovieCreateOrConnectWithoutLanguageInput = {
  where: MovieWhereUniqueInput
  create: MovieCreateWithoutLanguageInput
}

export type RoomCreateWithoutLanguageInput = {
  id?: string
  createdAt?: Date | string
  round: number
  roundLimit: number
  roundMovieId?: number | null
  players?: UserCreateManyWithoutParticipantInput
  host?: UserCreateOneWithoutHostInput
  roundCompleted?: UserCreateManyWithoutRoundCompletedInput
  movies?: MovieCreateManyWithoutRoomsInput
}

export type RoomCreateOrConnectWithoutLanguageInput = {
  where: RoomWhereUniqueInput
  create: RoomCreateWithoutLanguageInput
}

export type MovieUpdateWithWhereUniqueWithoutLanguageInput = {
  where: MovieWhereUniqueInput
  data: MovieUpdateWithoutLanguageDataInput
}

export type MovieUpsertWithWhereUniqueWithoutLanguageInput = {
  where: MovieWhereUniqueInput
  update: MovieUpdateWithoutLanguageDataInput
  create: MovieCreateWithoutLanguageInput
}

export type RoomUpdateWithWhereUniqueWithoutLanguageInput = {
  where: RoomWhereUniqueInput
  data: RoomUpdateWithoutLanguageDataInput
}

export type RoomUpsertWithWhereUniqueWithoutLanguageInput = {
  where: RoomWhereUniqueInput
  update: RoomUpdateWithoutLanguageDataInput
  create: RoomCreateWithoutLanguageInput
}

export type RoomCreateWithoutPlayersInput = {
  id?: string
  createdAt?: Date | string
  round: number
  roundLimit: number
  roundMovieId?: number | null
  host?: UserCreateOneWithoutHostInput
  roundCompleted?: UserCreateManyWithoutRoundCompletedInput
  language?: LanguageCreateOneWithoutRoomsInput
  movies?: MovieCreateManyWithoutRoomsInput
}

export type RoomCreateOrConnectWithoutUserInput = {
  where: RoomWhereUniqueInput
  create: RoomCreateWithoutPlayersInput
}

export type RoomCreateWithoutHostInput = {
  id?: string
  createdAt?: Date | string
  round: number
  roundLimit: number
  roundMovieId?: number | null
  players?: UserCreateManyWithoutParticipantInput
  roundCompleted?: UserCreateManyWithoutRoundCompletedInput
  language?: LanguageCreateOneWithoutRoomsInput
  movies?: MovieCreateManyWithoutRoomsInput
}

export type RoomCreateWithoutRoundCompletedInput = {
  id?: string
  createdAt?: Date | string
  round: number
  roundLimit: number
  roundMovieId?: number | null
  players?: UserCreateManyWithoutParticipantInput
  host?: UserCreateOneWithoutHostInput
  language?: LanguageCreateOneWithoutRoomsInput
  movies?: MovieCreateManyWithoutRoomsInput
}

export type RoomUpdateWithoutPlayersDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  round?: number | IntFieldUpdateOperationsInput
  roundLimit?: number | IntFieldUpdateOperationsInput
  roundMovieId?: number | NullableIntFieldUpdateOperationsInput | null
  host?: UserUpdateOneWithoutHostInput
  roundCompleted?: UserUpdateManyWithoutRoundCompletedInput
  language?: LanguageUpdateOneWithoutRoomsInput
  movies?: MovieUpdateManyWithoutRoomsInput
}

export type RoomUpsertWithoutPlayersInput = {
  update: RoomUpdateWithoutPlayersDataInput
  create: RoomCreateWithoutPlayersInput
}

export type RoomUpdateWithoutHostDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  round?: number | IntFieldUpdateOperationsInput
  roundLimit?: number | IntFieldUpdateOperationsInput
  roundMovieId?: number | NullableIntFieldUpdateOperationsInput | null
  players?: UserUpdateManyWithoutParticipantInput
  roundCompleted?: UserUpdateManyWithoutRoundCompletedInput
  language?: LanguageUpdateOneWithoutRoomsInput
  movies?: MovieUpdateManyWithoutRoomsInput
}

export type RoomUpsertWithoutHostInput = {
  update: RoomUpdateWithoutHostDataInput
  create: RoomCreateWithoutHostInput
}

export type RoomUpdateWithoutRoundCompletedDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  round?: number | IntFieldUpdateOperationsInput
  roundLimit?: number | IntFieldUpdateOperationsInput
  roundMovieId?: number | NullableIntFieldUpdateOperationsInput | null
  players?: UserUpdateManyWithoutParticipantInput
  host?: UserUpdateOneWithoutHostInput
  language?: LanguageUpdateOneWithoutRoomsInput
  movies?: MovieUpdateManyWithoutRoomsInput
}

export type RoomUpsertWithoutRoundCompletedInput = {
  update: RoomUpdateWithoutRoundCompletedDataInput
  create: RoomCreateWithoutRoundCompletedInput
}

export type UserCreateWithoutParticipantInput = {
  createdAt?: Date | string
  name: string
  score: number
  host?: RoomCreateOneWithoutHostInput
  roundCompleted?: RoomCreateOneWithoutRoundCompletedInput
}

export type UserCreateOrConnectWithoutRoomInput = {
  where: UserWhereUniqueInput
  create: UserCreateWithoutParticipantInput
}

export type UserCreateWithoutHostInput = {
  createdAt?: Date | string
  name: string
  score: number
  participant?: RoomCreateOneWithoutPlayersInput
  roundCompleted?: RoomCreateOneWithoutRoundCompletedInput
}

export type UserCreateWithoutRoundCompletedInput = {
  createdAt?: Date | string
  name: string
  score: number
  participant?: RoomCreateOneWithoutPlayersInput
  host?: RoomCreateOneWithoutHostInput
}

export type LanguageCreateWithoutRoomsInput = {
  name: string
  movies?: MovieCreateManyWithoutLanguageInput
}

export type LanguageCreateOrConnectWithoutRoomInput = {
  where: LanguageWhereUniqueInput
  create: LanguageCreateWithoutRoomsInput
}

export type MovieCreateWithoutRoomsInput = {
  createdAt?: Date | string
  name: string
  releaseDate: Date | string
  boxOffice: number
  director: PersonCreateOneWithoutDirectedInput
  cast?: PersonCreateManyWithoutActedInput
  genre?: GenreCreateManyWithoutMoviesInput
  language: LanguageCreateOneWithoutMoviesInput
}

export type MovieCreateOrConnectWithoutRoomInput = {
  where: MovieWhereUniqueInput
  create: MovieCreateWithoutRoomsInput
}

export type UserUpdateWithWhereUniqueWithoutParticipantInput = {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutParticipantDataInput
}

export type UserUpdateManyWithWhereNestedInput = {
  where: UserScalarWhereInput
  data: UserUpdateManyDataInput
}

export type UserScalarWhereInput = {
  AND?: Enumerable<UserScalarWhereInput>
  OR?: Array<UserScalarWhereInput>
  NOT?: Enumerable<UserScalarWhereInput>
  id?: number | IntFilter
  createdAt?: Date | string | DateTimeFilter
  name?: string | StringFilter
  score?: number | IntFilter
  participantId?: string | StringNullableFilter | null
  hostId?: string | StringNullableFilter | null
  roomId?: string | StringNullableFilter | null
}

export type UserUpsertWithWhereUniqueWithoutParticipantInput = {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutParticipantDataInput
  create: UserCreateWithoutParticipantInput
}

export type UserUpdateWithoutHostDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  score?: number | IntFieldUpdateOperationsInput
  participant?: RoomUpdateOneWithoutPlayersInput
  roundCompleted?: RoomUpdateOneWithoutRoundCompletedInput
}

export type UserUpsertWithoutHostInput = {
  update: UserUpdateWithoutHostDataInput
  create: UserCreateWithoutHostInput
}

export type UserUpdateWithWhereUniqueWithoutRoundCompletedInput = {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutRoundCompletedDataInput
}

export type UserUpsertWithWhereUniqueWithoutRoundCompletedInput = {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutRoundCompletedDataInput
  create: UserCreateWithoutRoundCompletedInput
}

export type LanguageUpdateWithoutRoomsDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  movies?: MovieUpdateManyWithoutLanguageInput
}

export type LanguageUpsertWithoutRoomsInput = {
  update: LanguageUpdateWithoutRoomsDataInput
  create: LanguageCreateWithoutRoomsInput
}

export type MovieUpdateWithWhereUniqueWithoutRoomsInput = {
  where: MovieWhereUniqueInput
  data: MovieUpdateWithoutRoomsDataInput
}

export type MovieUpsertWithWhereUniqueWithoutRoomsInput = {
  where: MovieWhereUniqueInput
  update: MovieUpdateWithoutRoomsDataInput
  create: MovieCreateWithoutRoomsInput
}

export type PersonUpdateWithoutActedDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  directed?: MovieUpdateManyWithoutDirectorInput
}

export type PersonUpdateManyDataInput = {
  name?: string | StringFieldUpdateOperationsInput
}

export type GenreUpdateWithoutMoviesDataInput = {
  name?: string | StringFieldUpdateOperationsInput
}

export type GenreUpdateManyDataInput = {
  name?: string | StringFieldUpdateOperationsInput
}

export type RoomUpdateWithoutMoviesDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  round?: number | IntFieldUpdateOperationsInput
  roundLimit?: number | IntFieldUpdateOperationsInput
  roundMovieId?: number | NullableIntFieldUpdateOperationsInput | null
  players?: UserUpdateManyWithoutParticipantInput
  host?: UserUpdateOneWithoutHostInput
  roundCompleted?: UserUpdateManyWithoutRoundCompletedInput
  language?: LanguageUpdateOneWithoutRoomsInput
}

export type RoomUpdateManyDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  round?: number | IntFieldUpdateOperationsInput
  roundLimit?: number | IntFieldUpdateOperationsInput
  roundMovieId?: number | NullableIntFieldUpdateOperationsInput | null
}

export type MovieUpdateWithoutCastDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  releaseDate?: Date | string | DateTimeFieldUpdateOperationsInput
  boxOffice?: number | FloatFieldUpdateOperationsInput
  director?: PersonUpdateOneRequiredWithoutDirectedInput
  genre?: GenreUpdateManyWithoutMoviesInput
  language?: LanguageUpdateOneRequiredWithoutMoviesInput
  rooms?: RoomUpdateManyWithoutMoviesInput
}

export type MovieUpdateManyDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  releaseDate?: Date | string | DateTimeFieldUpdateOperationsInput
  boxOffice?: number | FloatFieldUpdateOperationsInput
}

export type MovieUpdateWithoutDirectorDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  releaseDate?: Date | string | DateTimeFieldUpdateOperationsInput
  boxOffice?: number | FloatFieldUpdateOperationsInput
  cast?: PersonUpdateManyWithoutActedInput
  genre?: GenreUpdateManyWithoutMoviesInput
  language?: LanguageUpdateOneRequiredWithoutMoviesInput
  rooms?: RoomUpdateManyWithoutMoviesInput
}

export type MovieUpdateWithoutGenreDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  releaseDate?: Date | string | DateTimeFieldUpdateOperationsInput
  boxOffice?: number | FloatFieldUpdateOperationsInput
  director?: PersonUpdateOneRequiredWithoutDirectedInput
  cast?: PersonUpdateManyWithoutActedInput
  language?: LanguageUpdateOneRequiredWithoutMoviesInput
  rooms?: RoomUpdateManyWithoutMoviesInput
}

export type MovieUpdateWithoutLanguageDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  releaseDate?: Date | string | DateTimeFieldUpdateOperationsInput
  boxOffice?: number | FloatFieldUpdateOperationsInput
  director?: PersonUpdateOneRequiredWithoutDirectedInput
  cast?: PersonUpdateManyWithoutActedInput
  genre?: GenreUpdateManyWithoutMoviesInput
  rooms?: RoomUpdateManyWithoutMoviesInput
}

export type RoomUpdateWithoutLanguageDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  round?: number | IntFieldUpdateOperationsInput
  roundLimit?: number | IntFieldUpdateOperationsInput
  roundMovieId?: number | NullableIntFieldUpdateOperationsInput | null
  players?: UserUpdateManyWithoutParticipantInput
  host?: UserUpdateOneWithoutHostInput
  roundCompleted?: UserUpdateManyWithoutRoundCompletedInput
  movies?: MovieUpdateManyWithoutRoomsInput
}

export type UserUpdateWithoutParticipantDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  score?: number | IntFieldUpdateOperationsInput
  host?: RoomUpdateOneWithoutHostInput
  roundCompleted?: RoomUpdateOneWithoutRoundCompletedInput
}

export type UserUpdateManyDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  score?: number | IntFieldUpdateOperationsInput
}

export type UserUpdateWithoutRoundCompletedDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  score?: number | IntFieldUpdateOperationsInput
  participant?: RoomUpdateOneWithoutPlayersInput
  host?: RoomUpdateOneWithoutHostInput
}

export type MovieUpdateWithoutRoomsDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  releaseDate?: Date | string | DateTimeFieldUpdateOperationsInput
  boxOffice?: number | FloatFieldUpdateOperationsInput
  director?: PersonUpdateOneRequiredWithoutDirectedInput
  cast?: PersonUpdateManyWithoutActedInput
  genre?: GenreUpdateManyWithoutMoviesInput
  language?: LanguageUpdateOneRequiredWithoutMoviesInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
